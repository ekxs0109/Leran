
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x0000025a memsz 0x0000025a flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000038 memsz 0x00000038 flags r--
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00004000 memsz 0x00004000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025a  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000038  00008000  00008000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00004000  00009000  00009000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      0000001f  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00006020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000145  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 000000dc  00000000  00000000  000061a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   000000c7  00000000  00000000  00006281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    0000013f  00000000  00000000  00006348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line_str 00000037  00000000  00000000  00006487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c06 l       .text	00000000 read_disk
00007e00 l       .text	00000000 _start_32
00007e34 l       .text	00000000 gdt_desc
00000000 l    df *ABS*	00000000 os.c
0000b000 l     O .data	00001000 page_table
0000a000 g     O .data	00001000 map_phy_buffer
00007e3a g     F .text	00000020 os_init
00007c00 g       .text	00000000 _start
00009000 g     O .data	00000800 GDT_TABLE
0000d000 g       .data	00000000 __bss_start
0000c000 g     O .data	00001000 page_dir
0000d000 g       .data	00000000 _edata
0000d000 g       .data	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
  	.code16

	// 以下是代码区
 	.text
_start: 
	mov $_start, %esp
    7c00:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c06 <read_disk>:


read_disk:
	mov $_start_32, %bx // 写入开始的地址 0x7e00
    7c06:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx // 起始扇区号
    7c0b:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax // al扇区数量 64， ah 02表示读磁盘 给 bios 程序
	mov $0x80,%dx // 读取的磁盘驱动器号
    7c11:	00 cd                	add    %cl,%ch


	int $0x13 // bios 中断 低级磁盘服务, 调用磁盘读写功能 https://baike.baidu.com/item/BIOS%E4%B8%AD%E6%96%AD%E8%B0%83%E7%94%A8/22788153
    7c13:	13 72 f0             	adc    -0x10(%edx),%esi

	jc read_disk // 读取磁盘失败则再次读取 JC=Jump if Carry当运算产生进位标志时，即CF=1时，跳转到目标程序处

	# ============= 进入保护模式 =============
	cli // 关闭中断
    7c16:	fa                   	cli
	lgdt [gdt_desc] // LGDT和SGDT分别用于加载和保存GDTR寄存器的内容
    7c17:	0f 01 16             	lgdtl  (%esi)
    7c1a:	34 7e                	xor    $0x7e,%al
	mov $1, %eax
    7c1c:	66 b8 01 00          	mov    $0x1,%ax
    7c20:	00 00                	add    %al,(%eax)
	lmsw %ax // 设置cr0的PE位
    7c22:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32 // 跳转相对地址 
    7c25:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfc:	00 00                	add    %al,(%eax)
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	.byte 0x55, 0xaa	// 设置是否为可引导磁盘标识位

	.code32 // 切换以下代码生成32位的机器指令
	.text
_start_32:
	mov $KERNEL_DATA_SEG,%ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax,%ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax,%es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax,%fs
    7e08:	8e e0                	mov    %eax,%fs
	mov %ax,%gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov $_start,%esp
    7e0c:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	# ============= 设置分页 ========

	call os_init
    7e11:	e8 24 00 00 00       	call   7e3a <os_init>

	mov $page_dir, %eax // 设置页表
    7e16:	b8 00 c0 00 00       	mov    $0xc000,%eax
	mov %eax, %cr3 // 写入cr3
    7e1b:	0f 22 d8             	mov    %eax,%cr3


	mov %cr4, %eax // 读取cr4
    7e1e:	0f 20 e0             	mov    %cr4,%eax
	orl $(1<<4), %eax // 设置cr4的PAE位 设置允许分页
    7e21:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4 // 写入cr4
    7e24:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax // 读取cr0
    7e27:	0f 20 c0             	mov    %cr0,%eax
	orl $(1<<31), %eax // 设置cr0的PG位
    7e2a:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0 // 写入cr0
    7e2f:	0f 22 c0             	mov    %eax,%cr0



	jmp . 
    7e32:	eb fe                	jmp    7e32 <_start_32+0x32>

00007e34 <gdt_desc>:
    7e34:	ff 07                	incl   (%edi)
    7e36:	00                   	.byte 0x0
    7e37:	90                   	nop
	...

00007e3a <os_init>:
		[0] = (0) | PDE_P | PDE_W | PDE_U | PDE_PS, // 第0页 恒等映射
};


void os_init(void)
{
    7e3a:	55                   	push   %ebp
    7e3b:	89 e5                	mov    %esp,%ebp
	page_dir[MAP_ADDR >> 22] = (uint32_t) page_table | PDE_P | PDE_W | PDE_U ;
    7e3d:	b8 00 b0 00 00       	mov    $0xb000,%eax
    7e42:	83 c8 07             	or     $0x7,%eax
    7e45:	a3 00 c8 00 00       	mov    %eax,0xc800
	page_table[MAP_ADDR >> 12 & 0x3ff]  = (uint32_t) map_phy_buffer | PDE_P | PDE_W | PDE_U ; // 0x3ff 取低10位
    7e4a:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7e4f:	83 c8 07             	or     $0x7,%eax
    7e52:	a3 00 b0 00 00       	mov    %eax,0xb000
    7e57:	90                   	nop
    7e58:	5d                   	pop    %ebp
    7e59:	c3                   	ret
