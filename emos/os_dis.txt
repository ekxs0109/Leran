
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x0000036c memsz 0x0000036c flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000058 memsz 0x00000058 flags r--
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00004000 memsz 0x00004800 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036c  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000058  00008000  00008000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00004000  00009000  00009000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000800  0000d000  0000d000  00006000  2**3
                  ALLOC
  4 .comment      0000001f  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00006020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000001e2  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000013f  00000000  00000000  00006242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000105  00000000  00000000  00006381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    0000017e  00000000  00000000  00006486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 00000037  00000000  00000000  00006604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c06 l       .text	00000000 read_disk
00007e00 l       .text	00000000 _start_32
00007e40 l       .text	00000000 gdt_desc
00007e46 l       .text	00000000 idt_desc
00000000 l    df *ABS*	00000000 os.c
0000b000 l     O .data	00001000 page_table
0000a000 g     O .data	00001000 map_phy_buffer
00007e6b g     F .text	00000101 os_init
00007e35 g       .text	00000000 timer_init
00007c00 g       .text	00000000 _start
00009000 g     O .data	00000800 GDT_TABLE
00007e4c g     F .text	0000001f outb
0000d000 g       .bss	00000000 __bss_start
0000c000 g     O .data	00001000 page_dir
0000d000 g     O .bss	00000800 IDT_TABLE
0000d000 g       .data	00000000 _edata
0000d800 g       .bss	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
  	.code16

	// 以下是代码区
 	.text
_start: 
	mov $_start, %esp
    7c00:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c06 <read_disk>:


read_disk:
	mov $_start_32, %bx // 写入开始的地址 0x7e00
    7c06:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx // 起始扇区号
    7c0b:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax // al扇区数量 64， ah 02表示读磁盘 给 bios 程序
	mov $0x80,%dx // 读取的磁盘驱动器号
    7c11:	00 cd                	add    %cl,%ch


	int $0x13 // bios 中断 低级磁盘服务, 调用磁盘读写功能 https://baike.baidu.com/item/BIOS%E4%B8%AD%E6%96%AD%E8%B0%83%E7%94%A8/22788153
    7c13:	13 72 f0             	adc    -0x10(%edx),%esi

	jc read_disk // 读取磁盘失败则再次读取 JC=Jump if Carry当运算产生进位标志时，即CF=1时，跳转到目标程序处

	# ============= 进入保护模式 =============
	cli // 关闭中断
    7c16:	fa                   	cli
	lgdt [gdt_desc] // LGDT和SGDT分别用于加载和保存GDTR寄存器的内容
    7c17:	0f 01 16             	lgdtl  (%esi)
    7c1a:	40                   	inc    %eax
    7c1b:	7e 0f                	jle    7c2c <read_disk+0x26>
	lidt [idt_desc]
    7c1d:	01 1e                	add    %ebx,(%esi)
    7c1f:	46                   	inc    %esi
    7c20:	7e 66                	jle    7c88 <read_disk+0x82>
	mov $1, %eax
    7c22:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax // 设置cr0的PE位
    7c27:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32 // 跳转相对地址 
    7c2a:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:
	.byte 0x55, 0xaa	// 设置是否为可引导磁盘标识位

	.code32 // 切换以下代码生成32位的机器指令
	.text
_start_32:
	mov $KERNEL_DATA_SEG,%ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax,%ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax,%es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax,%fs
    7e08:	8e e0                	mov    %eax,%fs
	mov %ax,%gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov $_start,%esp
    7e0c:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	# ============= 设置分页 ========

	call os_init
    7e11:	e8 55 00 00 00       	call   7e6b <os_init>

	mov $page_dir, %eax // 设置页表
    7e16:	b8 00 c0 00 00       	mov    $0xc000,%eax
	mov %eax, %cr3 // 写入cr3
    7e1b:	0f 22 d8             	mov    %eax,%cr3


	mov %cr4, %eax // 读取cr4
    7e1e:	0f 20 e0             	mov    %cr4,%eax
	orl $(1<<4), %eax // 设置cr4的PAE位 设置允许分页
    7e21:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4 // 写入cr4
    7e24:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax // 读取cr0
    7e27:	0f 20 c0             	mov    %cr0,%eax
	orl $(1<<31), %eax // 设置cr0的PG位
    7e2a:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0 // 写入cr0
    7e2f:	0f 22 c0             	mov    %eax,%cr0


	sti // 开启中断
    7e32:	fb                   	sti

	jmp . 
    7e33:	eb fe                	jmp    7e33 <_start_32+0x33>

00007e35 <timer_init>:

timer_init:
	push %ds // 保存数据段寄存器
    7e35:	1e                   	push   %ds
	pusha // 保存寄存器
    7e36:	60                   	pusha
	mov $0x20, %ax
    7e37:	66 b8 20 00          	mov    $0x20,%ax
	outb %al, $0x20
    7e3b:	e6 20                	out    %al,$0x20

	popa // 恢复寄存器
    7e3d:	61                   	popa
	pop %ds // 恢复数据段寄存器
    7e3e:	1f                   	pop    %ds

	iret // 中断返回
    7e3f:	cf                   	iret

00007e40 <gdt_desc>:
    7e40:	ff 07                	incl   (%edi)
    7e42:	00                   	.byte 0x0
    7e43:	90                   	nop
	...

00007e46 <idt_desc>:
    7e46:	ff 07                	incl   (%edi)
    7e48:	00 d0                	add    %dl,%al
	...

00007e4c <outb>:
		[0] = (0) | PDE_P | PDE_W | PDE_U | PDE_PS, // 第0页 恒等映射
};



void outb(uint8_t data , uint16_t port){ // 给端口写入数据
    7e4c:	55                   	push   %ebp
    7e4d:	89 e5                	mov    %esp,%ebp
    7e4f:	83 ec 08             	sub    $0x8,%esp
    7e52:	8b 55 08             	mov    0x8(%ebp),%edx
    7e55:	8b 45 0c             	mov    0xc(%ebp),%eax
    7e58:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7e5b:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
    7e5f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7e63:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7e67:	ee                   	out    %al,(%dx)
}
    7e68:	90                   	nop
    7e69:	c9                   	leave
    7e6a:	c3                   	ret

00007e6b <os_init>:

void timer_init(void);

void os_init(void)
{
    7e6b:	55                   	push   %ebp
    7e6c:	89 e5                	mov    %esp,%ebp
    7e6e:	83 ec 10             	sub    $0x10,%esp
	outb(0x11,0x20); // 初始化8259 主片 控制器 
    7e71:	6a 20                	push   $0x20
    7e73:	6a 11                	push   $0x11
    7e75:	e8 d2 ff ff ff       	call   7e4c <outb>
    7e7a:	83 c4 08             	add    $0x8,%esp
	outb(0x11,0xA0); // 初始化8259 从片 控制器
    7e7d:	68 a0 00 00 00       	push   $0xa0
    7e82:	6a 11                	push   $0x11
    7e84:	e8 c3 ff ff ff       	call   7e4c <outb>
    7e89:	83 c4 08             	add    $0x8,%esp
	outb(0x20, 0x21); // 设置主片上的控制寄存器
    7e8c:	6a 21                	push   $0x21
    7e8e:	6a 20                	push   $0x20
    7e90:	e8 b7 ff ff ff       	call   7e4c <outb>
    7e95:	83 c4 08             	add    $0x8,%esp
	outb(0x28, 0xA1); // 设置从片上的控制寄存器
    7e98:	68 a1 00 00 00       	push   $0xa1
    7e9d:	6a 28                	push   $0x28
    7e9f:	e8 a8 ff ff ff       	call   7e4c <outb>
    7ea4:	83 c4 08             	add    $0x8,%esp

	outb(1 << 2, 0x21); // 告诉主片连接了从片
    7ea7:	6a 21                	push   $0x21
    7ea9:	6a 04                	push   $0x4
    7eab:	e8 9c ff ff ff       	call   7e4c <outb>
    7eb0:	83 c4 08             	add    $0x8,%esp
	outb(2,0xA1); // 告诉从片连接了主片
    7eb3:	68 a1 00 00 00       	push   $0xa1
    7eb8:	6a 02                	push   $0x2
    7eba:	e8 8d ff ff ff       	call   7e4c <outb>
    7ebf:	83 c4 08             	add    $0x8,%esp
	outb(0x1,0x21); // 操作系统相关
    7ec2:	6a 21                	push   $0x21
    7ec4:	6a 01                	push   $0x1
    7ec6:	e8 81 ff ff ff       	call   7e4c <outb>
    7ecb:	83 c4 08             	add    $0x8,%esp
	outb(0x1,0xA1); 
    7ece:	68 a1 00 00 00       	push   $0xa1
    7ed3:	6a 01                	push   $0x1
    7ed5:	e8 72 ff ff ff       	call   7e4c <outb>
    7eda:	83 c4 08             	add    $0x8,%esp

	outb(0xfe , 0x21); // 设置IRQ0开启
    7edd:	6a 21                	push   $0x21
    7edf:	68 fe 00 00 00       	push   $0xfe
    7ee4:	e8 63 ff ff ff       	call   7e4c <outb>
    7ee9:	83 c4 08             	add    $0x8,%esp

	int tmo = 1193180 / 100; // 时钟频率 1193180是每秒振荡次数, 这里为 100毫秒
    7eec:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
	outb(0x36, 0x43); // 初始化 PIT 的通道 0，设置为方波发生器模式，并准备好接受接下来的频率除数值，该除数值会通过两次 outb 调用分别发送低字节和高字节到 PIT 通道 0 的数据端口（0x40）。
    7ef3:	6a 43                	push   $0x43
    7ef5:	6a 36                	push   $0x36
    7ef7:	e8 50 ff ff ff       	call   7e4c <outb>
    7efc:	83 c4 08             	add    $0x8,%esp
	outb((uint8_t)tmo, 0x40); // 设置 8253 时钟频率
    7eff:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f02:	0f b6 c0             	movzbl %al,%eax
    7f05:	6a 40                	push   $0x40
    7f07:	50                   	push   %eax
    7f08:	e8 3f ff ff ff       	call   7e4c <outb>
    7f0d:	83 c4 08             	add    $0x8,%esp
	outb(tmo >> 8 , 0x40); // 由于outb每次只能发送8位数据，所以高8位和低8位要分开写入
    7f10:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f13:	c1 f8 08             	sar    $0x8,%eax
    7f16:	0f b6 c0             	movzbl %al,%eax
    7f19:	6a 40                	push   $0x40
    7f1b:	50                   	push   %eax
    7f1c:	e8 2b ff ff ff       	call   7e4c <outb>
    7f21:	83 c4 08             	add    $0x8,%esp



	IDT_TABLE[0x20].offset_l = (uint32_t)timer_init  & 0xFFFF;
    7f24:	b8 35 7e 00 00       	mov    $0x7e35,%eax
    7f29:	66 a3 00 d1 00 00    	mov    %ax,0xd100
	IDT_TABLE[0x20].offset_h = (uint32_t)timer_init  >> 16;
    7f2f:	b8 35 7e 00 00       	mov    $0x7e35,%eax
    7f34:	c1 e8 10             	shr    $0x10,%eax
    7f37:	66 a3 06 d1 00 00    	mov    %ax,0xd106
	IDT_TABLE[0x20].selector = KERNEL_CODE_SEG;
    7f3d:	66 c7 05 02 d1 00 00 	movw   $0x8,0xd102
    7f44:	08 00 
	IDT_TABLE[0x20].attr = 0x8e00; // 设置中断门 设置为32位
    7f46:	66 c7 05 04 d1 00 00 	movw   $0x8e00,0xd104
    7f4d:	00 8e 



	page_dir[MAP_ADDR >> 22] = (uint32_t) page_table | PDE_P | PDE_W | PDE_U ;
    7f4f:	b8 00 b0 00 00       	mov    $0xb000,%eax
    7f54:	83 c8 07             	or     $0x7,%eax
    7f57:	a3 00 c8 00 00       	mov    %eax,0xc800
	page_table[MAP_ADDR >> 12 & 0x3ff]  = (uint32_t) map_phy_buffer | PDE_P | PDE_W | PDE_U ; // 0x3ff 取低10位
    7f5c:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7f61:	83 c8 07             	or     $0x7,%eax
    7f64:	a3 00 b0 00 00       	mov    %eax,0xb000
    7f69:	90                   	nop
    7f6a:	c9                   	leave
    7f6b:	c3                   	ret
